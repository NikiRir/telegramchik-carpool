require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const { createDriverForm, createPassengerForm } = require('./forms');
const { validateContact, correctCity, formatDateTime, correctContact } = require('./validators');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });
const TARGET_CHAT_ID = process.env.CHAT_ID;
const SPAM_COOLDOWN = parseInt(process.env.SPAM_COOLDOWN) || 7;

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userSessions = {};
const userLastPost = {};

console.log('üöó –ë–æ—Ç –ø–æ–ø—É—Ç—á–∏–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω!');
console.log('üéØ –ì—Ä—É–ø–ø–∞ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', TARGET_CHAT_ID);

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const welcomeMessage = `üöó –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ

–í—ã–±–µ—Ä–∏—Ç–µ, –≤–æ–¥–∏—Ç–µ–ª—å –≤—ã –∏–ª–∏ –ø–∞—Å—Å–∞–∂–∏—Ä:`;
    
    const keyboard = {
        inline_keyboard: [
            [
                { text: 'üöô –Ø –≤–æ–¥–∏—Ç–µ–ª—å', callback_data: 'start_driver' },
                { text: 'üôã‚Äç‚ôÇÔ∏è –Ø –ø–∞—Å—Å–∞–∂–∏—Ä', callback_data: 'start_passenger' }
            ],
            [
                { text: '‚ùì –°–ø—Ä–∞–≤–∫–∞', callback_data: 'help' }
            ]
        ]
    };
    
    bot.sendMessage(chatId, welcomeMessage, { 
        reply_markup: keyboard 
    });
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.onText(/\/help/, (msg) => {
    showHelp(msg.chat.id);
});

function showHelp(chatId) {
    const helpMessage = `üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É –ø–æ–ø—É—Ç—á–∏–∫–æ–≤

üöô –î–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π:
- –û—Ç–∫—É–¥–∞ –∏ –∫—É–¥–∞ –µ–¥–µ—Ç–µ (–≥–æ—Ä–æ–¥–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω–∞)
- –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç
- –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏
- –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)

üôã‚Äç‚ôÇÔ∏è –î–ª—è –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤:
- –û—Ç–∫—É–¥–∞ –∏ –∫—É–¥–∞ –Ω—É–∂–Ω–æ –¥–æ–±—Ä–∞—Ç—å—Å—è
- –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–∞ –ø–æ–µ–∑–¥–∫–∞
- –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)

‚öôÔ∏è –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è –≥–æ—Ä–æ–¥–æ–≤ (–ß—ã–ª–Ω—ã ‚Üí –ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ –ß–µ–ª–Ω—ã)
- –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (–≤–∞—Ç—Å–∞–ø ‚Üí WhatsApp üì±)
- –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ - ${SPAM_COOLDOWN} –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
- –ö–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö
- –ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å—å –≤ –∫–æ–Ω—Ü–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π`;
    
    bot.sendMessage(chatId, helpMessage);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.on('callback_query', (callbackQuery) => {
    const message = callbackQuery.message;
    const data = callbackQuery.data;
    const userId = callbackQuery.from.id;
    const chatId = message.chat.id;
    
    console.log('üîî –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞:', data, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', userId);
    
    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    bot.answerCallbackQuery(callbackQuery.id);
    
    if (data === 'start_driver') {
        bot.editMessageReplyMarkup(null, {
            chat_id: chatId,
            message_id: message.message_id
        });
        startDriverFlow(chatId, userId, callbackQuery.from);
        
    } else if (data === 'start_passenger') {
        bot.editMessageReplyMarkup(null, {
            chat_id: chatId,
            message_id: message.message_id
        });
        startPassengerFlow(chatId, userId, callbackQuery.from);
        
    } else if (data === 'help') {
        showHelp(chatId);
        
    } else if (data === 'skip_contact') {
        console.log('üîÑ –ü—Ä–æ–ø—É—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
        bot.editMessageText('‚è≠Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã, —Ñ–æ—Ä–º–∏—Ä—É—é –æ–±—ä—è–≤–ª–µ–Ω–∏–µ...', {
            chat_id: chatId,
            message_id: message.message_id
        });
        
        setTimeout(() => {
            handleSkipContact(chatId, userId);
        }, 500);
        
    } else if (data.startsWith('publish_driver_')) {
        console.log('üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è');
        bot.editMessageText('üì§ –ü—É–±–ª–∏–∫—É—é –æ–±—ä—è–≤–ª–µ–Ω–∏–µ...', {
            chat_id: chatId,
            message_id: message.message_id
        });
        publishDriverAd(chatId, userId);
        
    } else if (data.startsWith('publish_passenger_')) {
        console.log('üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞—è–≤–∫–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–∞');
        bot.editMessageText('üì§ –ü—É–±–ª–∏–∫—É—é –∑–∞—è–≤–∫—É...', {
            chat_id: chatId,
            message_id: message.message_id
        });
        publishPassengerAd(chatId, userId);
        
    } else if (data.startsWith('cancel_')) {
        console.log('‚ùå –û—Ç–º–µ–Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è');
        bot.editMessageText('‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', {
            chat_id: chatId,
            message_id: message.message_id
        });
        cancelSession(chatId, userId);
    }
});

// –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—è
function startDriverFlow(chatId, userId, userFrom) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω—Ç–∏—Å–ø–∞–º–∞
    if (userLastPost[userId]) {
        const timeDiff = (Date.now() - userLastPost[userId]) / 1000 / 60;
        if (timeDiff < SPAM_COOLDOWN) {
            const remaining = Math.ceil(SPAM_COOLDOWN - timeDiff);
            bot.sendMessage(chatId, `‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${remaining} –º–∏–Ω. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º`);
            return;
        }
    }
    
    userSessions[userId] = {
        type: 'driver',
        step: 'from',
        data: {},
        userInfo: {
            id: userId,
            firstName: userFrom.first_name,
            lastName: userFrom.last_name,
            username: userFrom.username
        }
    };
    
    console.log('üöó –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è:', userId);
    
    const keyboard = {
        inline_keyboard: [
            [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: `cancel_${userId}` }]
        ]
    };
    
    bot.sendMessage(chatId, 'üöô –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è\n\nüìç –û—Ç–∫—É–¥–∞ –µ–¥–µ—Ç–µ? (–≥–æ—Ä–æ–¥ –≤ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω–µ)', {
        reply_markup: keyboard
    });
}

// –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–∞
function startPassengerFlow(chatId, userId, userFrom) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω—Ç–∏—Å–ø–∞–º–∞
    if (userLastPost[userId]) {
        const timeDiff = (Date.now() - userLastPost[userId]) / 1000 / 60;
        if (timeDiff < SPAM_COOLDOWN) {
            const remaining = Math.ceil(SPAM_COOLDOWN - timeDiff);
            bot.sendMessage(chatId, `‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${remaining} –º–∏–Ω. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º`);
            return;
        }
    }
    
    userSessions[userId] = {
        type: 'passenger', 
        step: 'from',
        data: {},
        userInfo: {
            id: userId,
            firstName: userFrom.first_name,
            lastName: userFrom.last_name,
            username: userFrom.username
        }
    };
    
    console.log('üôã‚Äç‚ôÇÔ∏è –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –¥–ª—è:', userId);
    
    const keyboard = {
        inline_keyboard: [
            [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: `cancel_${userId}` }]
        ]
    };
    
    bot.sendMessage(chatId, 'üôã‚Äç‚ôÇÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–∞\n\nüìç –û—Ç–∫—É–¥–∞ –Ω—É–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å? (–≥–æ—Ä–æ–¥ –≤ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω–µ)', {
        reply_markup: keyboard
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', (msg) => {
    if (msg.text && !msg.text.startsWith('/')) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        const session = userSessions[userId];
        
        if (!session) return;
        
        handleUserInput(chatId, userId, msg.text, session);
    }
});

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞
function handleUserInput(chatId, userId, text, session) {
    if (session.type === 'driver') {
        handleDriverInput(chatId, userId, text, session);
    } else if (session.type === 'passenger') {
        handlePassengerInput(chatId, userId, text, session);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–æ–¥–∏—Ç–µ–ª—è
function handleDriverInput(chatId, userId, text, session) {
    const { step, data } = session;
    
    const cancelKeyboard = {
        inline_keyboard: [
            [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: `cancel_${userId}` }]
        ]
    };
    
    switch (step) {
        case 'from':
            const fromCorrection = correctCity(text);
            if (!fromCorrection.city) {
                bot.sendMessage(chatId, '‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n–ü—Ä–∏–º–µ—Ä—ã: –ö–∞–∑–∞–Ω—å, –ß–µ–ª–Ω—ã, –ê–ª—å–º–µ—Ç—å–µ–≤—Å–∫, –ï–ª–∞–±—É–≥–∞', {
                    reply_markup: cancelKeyboard
                });
                return;
            }
            
            data.from = fromCorrection.city;
            session.step = 'to';
            
            bot.sendMessage(chatId, 'üìç –ö—É–¥–∞ –µ–¥–µ—Ç–µ? (–≥–æ—Ä–æ–¥ –≤ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω–µ)', {
                reply_markup: cancelKeyboard
            });
            break;
            
        case 'to':
            const toCorrection = correctCity(text);
            if (!toCorrection.city) {
                bot.sendMessage(chatId, '‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n–ü—Ä–∏–º–µ—Ä—ã: –ö–∞–∑–∞–Ω—å, –ß–µ–ª–Ω—ã, –ê–ª—å–º–µ—Ç—å–µ–≤—Å–∫, –ï–ª–∞–±—É–≥–∞', {
                    reply_markup: cancelKeyboard
                });
                return;
            }
            
            // –ü–†–û–í–ï–†–ö–ê –û–î–ò–ù–ê–ö–û–í–´–• –ì–û–†–û–î–û–í
            if (toCorrection.city === data.from) {
                bot.sendMessage(chatId, '‚ùå –ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.', {
                    reply_markup: cancelKeyboard
                });
                return;
            }
            
            data.to = toCorrection.city;
            session.step = 'datetime';
            
            bot.sendMessage(chatId, 'üïí –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ—Ç—ä–µ–∑–¥–∞?\n(–Ω–∞–ø—Ä–∏–º–µ—Ä: "–∑–∞–≤—Ç—Ä–∞ –≤ 15:00" –∏–ª–∏ "—Å–µ–≥–æ–¥–Ω—è –≤ 09:30")', {
                reply_markup: cancelKeyboard
            });
            break;
            
        case 'datetime':
            const dateTimeValidation = formatDateTime(text);
            if (!dateTimeValidation.isValid) {
                bot.sendMessage(chatId, `‚ùå ${dateTimeValidation.error}\n\n–ü—Ä–∏–º–µ—Ä—ã: "–∑–∞–≤—Ç—Ä–∞ –≤ 15:00", "—Å–µ–≥–æ–¥–Ω—è –≤ 09:30", "05.10 –≤ 14:20"`, {
                    reply_markup: cancelKeyboard
                });
                return;
            }
            
            data.datetime = dateTimeValidation.formatted;
            session.step = 'seats';
            bot.sendMessage(chatId, 'üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç? (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 8)', {
                reply_markup: cancelKeyboard
            });
            break;
            
        case 'seats':
            if (isNaN(text) || parseInt(text) < 1 || parseInt(text) > 8) {
                bot.sendMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 8', {
                    reply_markup: cancelKeyboard
                });
                return;
            }
            data.seats = parseInt(text);
            session.step = 'price';
            bot.sendMessage(chatId, 'üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Å —á–µ–ª–æ–≤–µ–∫–∞? (–≤ —Ä—É–±–ª—è—Ö, —á–∏—Å–ª–æ)', {
                reply_markup: cancelKeyboard
            });
            break;
            
        case 'price':
            if (isNaN(text) || parseInt(text) < 0) {
                bot.sendMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —á–∏—Å–ª–æ–º (0 = –±–µ—Å–ø–ª–∞—Ç–Ω–æ)', {
                    reply_markup: cancelKeyboard
                });
                return;
            }
            data.price = parseInt(text);
            session.step = 'contact';
            askForContact(chatId, userId);
            break;
            
        case 'contact':
            // –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            const contactCorrection = correctContact(text);
            let finalContact = contactCorrection.contact;
            
            const contactValidation = validateContact(finalContact);
            if (!contactValidation.isValid) {
                bot.sendMessage(chatId, `‚ùå ${contactValidation.error}\n\n–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à Telegram`, {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_contact' }],
                            [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: `cancel_${userId}` }]
                        ]
                    }
                });
                return;
            }
            
            data.contact = finalContact;
            
            showDriverPreview(chatId, userId, data, session.userInfo);
            break;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–∞
function handlePassengerInput(chatId, userId, text, session) {
    const { step, data } = session;
    
    const cancelKeyboard = {
        inline_keyboard: [
            [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: `cancel_${userId}` }]
        ]
    };
    
    switch (step) {
        case 'from':
            const fromCorrection = correctCity(text);
            if (!fromCorrection.city) {
                bot.sendMessage(chatId, '‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n–ü—Ä–∏–º–µ—Ä—ã: –ö–∞–∑–∞–Ω—å, –ß–µ–ª–Ω—ã, –ê–ª—å–º–µ—Ç—å–µ–≤—Å–∫, –ï–ª–∞–±—É–≥–∞', {
                    reply_markup: cancelKeyboard
                });
                return;
            }
            
            data.from = fromCorrection.city;
            session.step = 'to';
            
            bot.sendMessage(chatId, 'üìç –ö—É–¥–∞ –Ω—É–∂–Ω–æ –¥–æ–±—Ä–∞—Ç—å—Å—è? (–≥–æ—Ä–æ–¥ –≤ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω–µ)', {
                reply_markup: cancelKeyboard
            });
            break;
            
        case 'to':
            const toCorrection = correctCity(text);
            if (!toCorrection.city) {
                bot.sendMessage(chatId, '‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n–ü—Ä–∏–º–µ—Ä—ã: –ö–∞–∑–∞–Ω—å, –ß–µ–ª–Ω—ã, –ê–ª—å–º–µ—Ç—å–µ–≤—Å–∫, –ï–ª–∞–±—É–≥–∞', {
                    reply_markup: cancelKeyboard
                });
                return;
            }
            
            // –ü–†–û–í–ï–†–ö–ê –û–î–ò–ù–ê–ö–û–í–´–• –ì–û–†–û–î–û–í
            if (toCorrection.city === data.from) {
                bot.sendMessage(chatId, '‚ùå –ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.', {
                    reply_markup: cancelKeyboard
                });
                return;
            }
            
            data.to = toCorrection.city;
            session.step = 'datetime';
            
            bot.sendMessage(chatId, 'üïí –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–∞ –ø–æ–µ–∑–¥–∫–∞?\n(–Ω–∞–ø—Ä–∏–º–µ—Ä: "–∑–∞–≤—Ç—Ä–∞ –≤ 15:00" –∏–ª–∏ "—Å–µ–≥–æ–¥–Ω—è –≤ 09:30")', {
                reply_markup: cancelKeyboard
            });
            break;
            
        case 'datetime':
            const dateTimeValidation = formatDateTime(text);
            if (!dateTimeValidation.isValid) {
                bot.sendMessage(chatId, `‚ùå ${dateTimeValidation.error}\n\n–ü—Ä–∏–º–µ—Ä—ã: "–∑–∞–≤—Ç—Ä–∞ –≤ 15:00", "—Å–µ–≥–æ–¥–Ω—è –≤ 09:30", "05.10 –≤ 14:20"`, {
                    reply_markup: cancelKeyboard
                });
                return;
            }
            
            data.datetime = dateTimeValidation.formatted;
            session.step = 'contact';
            askForContact(chatId, userId);
            break;
            
        case 'contact':
            // –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            const contactCorrection = correctContact(text);
            let finalContact = contactCorrection.contact;
            
            const contactValidation = validateContact(finalContact);
            if (!contactValidation.isValid) {
                bot.sendMessage(chatId, `‚ùå ${contactValidation.error}\n\n–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à Telegram`, {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_contact' }],
                            [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: `cancel_${userId}` }]
                        ]
                    }
                });
                return;
            }
            
            data.contact = finalContact;
            
            showPassengerPreview(chatId, userId, data, session.userInfo);
            break;
    }
}

// –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
function askForContact(chatId, userId) {
    const keyboard = {
        inline_keyboard: [
            [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_contact' }],
            [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: `cancel_${userId}` }]
        ]
    };
    
    bot.sendMessage(chatId, `üìû –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏?

üì± –ü—Ä–∏–º–µ—Ä—ã:
- –≤–∞—Ç—Å–∞–ø +7 999 123-45-67

–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —Å –≤–∞–º–∏ —Å–≤—è–∑—ã–≤–∞–ª–∏—Å—å –ø–æ Telegram.`, {
        reply_markup: keyboard
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
function handleSkipContact(chatId, userId) {
    console.log('üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    
    const session = userSessions[userId];
    if (!session) {
        console.log('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
        bot.sendMessage(chatId, '‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start');
        return;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
    if (session.userInfo.username) {
        session.data.contact = `@${session.userInfo.username}`;
    } else if (session.userInfo.firstName) {
        session.data.contact = session.userInfo.firstName;
    } else {
        session.data.contact = '–°–≤—è–∂–∏—Ç–µ—Å—å —á–µ—Ä–µ–∑ –±–æ—Ç';
    }
    
    console.log('üíæ –ö–æ–Ω—Ç–∞–∫—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', session.data.contact);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    try {
        if (session.type === 'driver') {
            showDriverPreview(chatId, userId, session.data, session.userInfo);
        } else if (session.type === 'passenger') {
            showPassengerPreview(chatId, userId, session.data, session.userInfo);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞:', error);
        bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start');
    }
}

// –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–¥–∏—Ç–µ–ª—è
function showDriverPreview(chatId, userId, data, userInfo) {
    console.log('üé¨ –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–¥–∏—Ç–µ–ª—è');
    
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º forPreview = true —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å—å
        const preview = createDriverForm(data, userInfo, true);
        
        const keyboard = {
            inline_keyboard: [
                [
                    { text: '‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', callback_data: `publish_driver_${userId}` },
                    { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: `cancel_${userId}` }
                ]
            ]
        };
        
        bot.sendMessage(chatId, `üìù –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n\n${preview}`, {
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
        
        console.log('‚úÖ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–¥–∏—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–æ–¥–∏—Ç–µ–ª—è:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞');
    }
}

// –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–∞—Å—Å–∞–∂–∏—Ä–∞
function showPassengerPreview(chatId, userId, data, userInfo) {
    console.log('üé¨ –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–∞—Å—Å–∞–∂–∏—Ä–∞');
    
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º forPreview = true —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å—å
        const preview = createPassengerForm(data, userInfo, true);
        
        const keyboard = {
            inline_keyboard: [
                [
                    { text: '‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', callback_data: `publish_passenger_${userId}` },
                    { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: `cancel_${userId}` }
                ]
            ]
        };
        
        bot.sendMessage(chatId, `üìù –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–∫–∏:\n\n${preview}`, {
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
        
        console.log('‚úÖ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–∞:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞');
    }
}

// –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è
function publishDriverAd(chatId, userId) {
    const session = userSessions[userId];
    if (!session) {
        bot.sendMessage(chatId, '‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º forPreview = false —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å—å
    const message = createDriverForm(session.data, session.userInfo, false);
    
    bot.sendMessage(TARGET_CHAT_ID, message, { parse_mode: 'Markdown' })
        .then(() => {
            bot.sendMessage(chatId, '‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!');
            userLastPost[userId] = Date.now();
            delete userSessions[userId];
        })
        .catch((error) => {
            console.error('–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:', error);
            bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.');
        });
}

// –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–∞—Å—Å–∞–∂–∏—Ä–∞
function publishPassengerAd(chatId, userId) {
    const session = userSessions[userId];
    if (!session) {
        bot.sendMessage(chatId, '‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º forPreview = false —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å—å
    const message = createPassengerForm(session.data, session.userInfo, false);
    
    bot.sendMessage(TARGET_CHAT_ID, message, { parse_mode: 'Markdown' })
        .then(() => {
            bot.sendMessage(chatId, '‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!');
            userLastPost[userId] = Date.now();
            delete userSessions[userId];
        })
        .catch((error) => {
            console.error('–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:', error);
            bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.');
        });
}

// –û—Ç–º–µ–Ω–∞ —Å–µ—Å—Å–∏–∏
function cancelSession(chatId, userId) {
    delete userSessions[userId];
    bot.sendMessage(chatId, '‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
});

bot.on('polling_error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ polling:', error);
});

console.log('‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');